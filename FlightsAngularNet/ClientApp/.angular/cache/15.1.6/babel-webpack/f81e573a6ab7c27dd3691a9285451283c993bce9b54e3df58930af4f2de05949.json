{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightsService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFlights()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlights$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlights$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightsService.SearchFlightsPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlights$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlights$Plain(params, context) {\n    return this.searchFlights$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlights$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlights$Json$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightsService.SearchFlightsPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlights$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlights$Json(params, context) {\n    return this.searchFlights$Json$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findFlights()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlights()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlights$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightsService.FindFlightsPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlights$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlights(params, context) {\n    return this.findFlights$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightsService.SearchFlightsPath = '/Flights';\nFlightsService.FindFlightsPath = '/Flights/id';\nFlightsService.ɵfac = function FlightsService_Factory(t) {\n  return new (t || FlightsService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightsService,\n  factory: FlightsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","FlightsService","constructor","config","http","searchFlights$Plain$Response","params","context","rb","rootUrl","SearchFlightsPath","request","build","responseType","accept","pipe","r","searchFlights$Plain","body","searchFlights$Json$Response","searchFlights$Json","findFlights$Response","FindFlightsPath","query","id","clone","undefined","findFlights","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Bishop\\Documents\\angular projects\\FlightsAngularNet\\FlightsAngularNet\\ClientApp\\src\\app\\api\\services\\flights.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { FlightsRm } from '../models/flights-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightsService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchFlights()` */\r\n  static readonly SearchFlightsPath = '/Flights';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlights$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlights$Plain$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<FlightsRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightsService.SearchFlightsPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightsRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlights$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlights$Plain(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<FlightsRm>> {\r\n    return this.searchFlights$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightsRm>>): Array<FlightsRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlights$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlights$Json$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<FlightsRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightsService.SearchFlightsPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightsRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlights$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlights$Json(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<FlightsRm>> {\r\n    return this.searchFlights$Json$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightsRm>>): Array<FlightsRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findFlights()` */\r\n  static readonly FindFlightsPath = '/Flights/id';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlights()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlights$Response(\r\n    params?: {\r\n      id?: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightsService.FindFlightsPath, 'get');\r\n    if (params) {\r\n      rb.query('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlights$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlights(\r\n    params?: {\r\n      id?: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.findFlights$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}